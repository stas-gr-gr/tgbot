import logging
import requests
import pandas as pd
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext
)

# === –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_DRIVE_FILE_URL = os.getenv("GOOGLE_DRIVE_FILE_URL")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏) ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# === –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ ===
async def start(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/–æ–±–Ω–æ–≤–∏—Ç—å - –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "/—Ñ–∏–Ω–∞–Ω—Å—ã - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º\n"
        "/–ø–µ—Ä–∏–æ–¥ <–¥–∞—Ç–∞_–Ω–∞—á–∞–ª–∞> <–¥–∞—Ç–∞_–∫–æ–Ω—Ü–∞> - –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
        "/–ø—Ä–æ–µ–∫—Ç <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É"
    )

# === –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ===
async def update_data(update: Update, context: CallbackContext) -> None:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Drive"""
    await update.message.reply_text("–û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
    response = requests.get(GOOGLE_DRIVE_FILE_URL)
    
    if response.status_code == 200:
        with open("data.xlsx", "wb") as file:
            file.write(response.content)
        await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")

# === –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è Excel-—Ñ–∞–π–ª–∞ ===
def read_data():
    """–°—á–∏—Ç—ã–≤–∞–µ—Ç Excel-—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame"""
    try:
        df = pd.read_excel("data.xlsx")
        return df
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return None

# === –§—É–Ω–∫—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º ===
async def finances(update: Update, context: CallbackContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º"""
    df = read_data()
    if df is None:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    try:
        total_profit = df["–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å"].sum()
        total_sales = df["–°—É–º–º–∞ –∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é"].sum()
        total_expenses = df["–†–∞—Å—Ö–æ–¥—ã"].sum()
        
        await update.message.reply_text(
            f"üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç:\n"
            f"üí∞ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:.2f} ‚ÇΩ\n"
            f"üìà –ü—Ä–æ–¥–∞–∂–∏: {total_sales:.2f} ‚ÇΩ\n"
            f"üìâ –†–∞—Å—Ö–æ–¥—ã: {total_expenses:.2f} ‚ÇΩ"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")

# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É ===
async def filter_by_period(update: Update, context: CallbackContext) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É"""
    try:
        start_date, end_date = context.args
        df = read_data()
        if df is None:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"])
        mask = (df["–î–∞—Ç–∞"] >= start_date) & (df["–î–∞—Ç–∞"] <= end_date)
        df_filtered = df.loc[mask]

        total_profit = df_filtered["–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å"].sum()
        await update.message.reply_text(
            f"üìÖ –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}:\n"
            f"üí∞ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:.2f} ‚ÇΩ"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–∏–æ–¥–∞: {e}")
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: /–ø–µ—Ä–∏–æ–¥ –î–î.–ú–ú.–ì–ì–ì–ì –î–î.–ú–ú.–ì–ì–ì–ì")

# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç—É ===
async def filter_by_project(update: Update, context: CallbackContext) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É"""
    try:
        project_name = " ".join(context.args)
        df = read_data()
        if df is None:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        df_filtered = df[df["–ü—Ä–æ–µ–∫—Ç"] == project_name]

        if df_filtered.empty:
            await update.message.reply_text(f"‚ùå –î–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–æ–µ–∫—Ç—É {project_name} –Ω–µ—Ç.")
            return
        
        total_profit = df_filtered["–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å"].sum()
        await update.message.reply_text(
            f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–µ–∫—Ç—É {project_name}:\n"
            f"üí∞ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:.2f} ‚ÇΩ"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: /–ø—Ä–æ–µ–∫—Ç <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞>")

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("–æ–±–Ω–æ–≤–∏—Ç—å", update_data))
    app.add_handler(CommandHandler("—Ñ–∏–Ω–∞–Ω—Å—ã", finances))
    app.add_handler(CommandHandler("–ø–µ—Ä–∏–æ–¥", filter_by_period))
    app.add_handler(CommandHandler("–ø—Ä–æ–µ–∫—Ç", filter_by_project))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "_main_":
    main()
