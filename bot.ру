import logging
import requests
import pandas as pd
import os
import time
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,  # ✅ Исправлено (раньше было Filters)
    CallbackContext
)

# === Читаем переменные окружения ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_DRIVE_FILE_URL = os.getenv("GOOGLE_DRIVE_FILE_URL")

# === Логирование (для отладки) ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# === Функции бота ===
async def start(update: Update, context: CallbackContext) -> None:
    """Отправляет приветственное сообщение"""
    await update.message.reply_text("Привет! Я бот учёта продаж. Напишите /обновить")

async def update_data(update: Update, context: CallbackContext) -> None:
    """Скачивает и обновляет файл данных из Google Drive"""
    await update.message.reply_text("Обновляю данные...")
    response = requests.get(GOOGLE_DRIVE_FILE_URL)
    
    if response.status_code == 200:
        with open("data.xlsx", "wb") as file:
            file.write(response.content)
        await update.message.reply_text("✅ Данные обновлены!")
    else:
        await update.message.reply_text("❌ Ошибка обновления. Проверьте ссылку.")

# === Основная функция ===
def main():
    """Запуск бота"""
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # Добавляем команды
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("обновить", update_data))

    # Запуск бота
    logging.info("Бот запущен...")
    app.run_polling()

if _name_ == "_main_":
    main()

if _name_ == "_main_":
    main()
