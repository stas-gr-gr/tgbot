import logging
import requests
import pandas as pd
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler

# === –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê ===
TELEGRAM_BOT_TOKEN = "7811619569:AAFElZtq6qIgPtwsJ8mRrlYIEm3cB8g1d6U"
PASSWORD = "7070"
AUTHORIZED_USERS = set()

# === –°–°–´–õ–ö–ê –ù–ê GOOGLE DRIVE ===
GOOGLE_DRIVE_FILE_URL = "https://drive.google.com/uc?export=download&id=1fH6InkrqhZWUDZRz_OJ-DHe_l_M0_9Oc"
EXCEL_FILE_PATH = "–§–ò–ù–ê–õ.xlsx"

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(_name_)

# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–ö–ê–ß–ò–í–ê–ù–ò–Ø –§–ê–ô–õ–ê ===
def download_latest_excel():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ –∏–∑ Google Drive."""
    response = requests.get(GOOGLE_DRIVE_FILE_URL)
    if response.status_code == 200:
        with open(EXCEL_FILE_PATH, "wb") as file:
            file.write(response.content)
        return True
    return False

# === –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ===
def start(update: Update, context: CallbackContext) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞."""
    user_id = update.message.from_user.id
    if user_id in AUTHORIZED_USERS:
        update.message.reply_text("‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –í–≤–µ–¥–∏—Ç–µ /–º–µ–Ω—é")
        return
    update.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    return "PASSWORD"

def check_password(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å."""
    user_id = update.message.from_user.id
    if update.message.text == PASSWORD:
        AUTHORIZED_USERS.add(user_id)
        update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω! –í–≤–µ–¥–∏—Ç–µ /–º–µ–Ω—é.")
        return ConversationHandler.END
    update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
    return "PASSWORD"

def menu(update: Update, context: CallbackContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    if update.message.from_user.id not in AUTHORIZED_USERS:
        update.message.reply_text("üö´ –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –∏ –ø–∞—Ä–æ–ª—å.")
        return
    keyboard = [["/—Ñ–∏–Ω–∞–Ω—Å—ã", "/—É—á–µ—Ç_–ø—Ä–æ–¥–∞–∂"], ["/–æ—Ç–≥—Ä—É–∑–∫–∏", "/–∑–∞—Ä–ø–ª–∞—Ç—ã"], ["/–≤—ã–ø–ª–∞—Ç—ã", "/—Å–∫–ª–∞–¥"], ["/–æ–±–Ω–æ–≤–∏—Ç—å", "/–ø–æ–∏—Å–∫"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    update.message.reply_text("üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

def update_data(update: Update, context: CallbackContext) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Drive."""
    if download_latest_excel():
        update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –í–≤–µ–¥–∏—Ç–µ /–º–µ–Ω—é.")
    else:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")

def get_finance(update: Update, context: CallbackContext) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    if not os.path.exists(EXCEL_FILE_PATH):
        update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /–æ–±–Ω–æ–≤–∏—Ç—å.")
        return
    df_finance = pd.read_excel(EXCEL_FILE_PATH, sheet_name="–§–∏–Ω–∞–Ω—Å—ã")
    update.message.reply_text(f"üìä –§–∏–Ω–∞–Ω—Å—ã:\n{df_finance.to_string(index=False)}")

def get_sales(update: Update, context: CallbackContext) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º."""
    if not os.path.exists(EXCEL_FILE_PATH):
        update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /–æ–±–Ω–æ–≤–∏—Ç—å.")
        return
    df_sales = pd.read_excel(EXCEL_FILE_PATH, sheet_name="–£—á–µ—Ç –ø—Ä–æ–¥–∞–∂ Wildberries")
    update.message.reply_text(f"üìà –£—á–µ—Ç –ø—Ä–æ–¥–∞–∂:\n{df_sales.head(5).to_string(index=False)}")

def get_shipments(update: Update, context: CallbackContext) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –æ—Ç–≥—Ä—É–∑–∫–∞–º."""
    if not os.path.exists(EXCEL_FILE_PATH):
        update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /–æ–±–Ω–æ–≤–∏—Ç—å.")
        return
    df_shipments = pd.read_excel(EXCEL_FILE_PATH, sheet_name="–û—Ç–≥—Ä—É–∑–∫–∞")
    update.message.reply_text(f"üöõ –û—Ç–≥—Ä—É–∑–∫–∏:\n{df_shipments.head(5).to_string(index=False)}")

def get_salaries(update: Update, context: CallbackContext) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º."""
    if not os.path.exists(EXCEL_FILE_PATH):
        update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /–æ–±–Ω–æ–≤–∏—Ç—å.")
        return
    df_salaries = pd.read_excel(EXCEL_FILE_PATH, sheet_name="–ó–∞—Ä–ø–ª–∞—Ç—ã")
    update.message.reply_text(f"üí∏ –ó–∞—Ä–ø–ª–∞—Ç—ã:\n{df_salaries.head(5).to_string(index=False)}")

def search_data(update: Update, context: CallbackContext) -> None:
    """–ò–ò-–ø–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω—ã–º."""
    if not os.path.exists(EXCEL_FILE_PATH):
        update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /–æ–±–Ω–æ–≤–∏—Ç—å.")
        return
    query = " ".join(context.args).lower()
    result = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n"
    for sheet_name in ["–§–∏–Ω–∞–Ω—Å—ã", "–£—á–µ—Ç –ø—Ä–æ–¥–∞–∂ Wildberries", "–û—Ç–≥—Ä—É–∑–∫–∞", "–ó–∞—Ä–ø–ª–∞—Ç—ã"]:
        df = pd.read_excel(EXCEL_FILE_PATH, sheet_name=sheet_name)
        matches = df[df.astype(str).apply(lambda x: x.str.contains(query, case=False, na=False)).any(axis=1)]
        if not matches.empty:
            result += f"\nüìå {sheet_name}:\n{matches.to_string(index=False)}\n"
    if "üìå" not in result:
        result = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    update.message.reply_text(result)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    updater = Updater(TELEGRAM_BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    conv_handler = ConversationHandler(entry_points=[CommandHandler("start", start)], states={"PASSWORD": [MessageHandler(Filters.text, check_password)]}, fallbacks=[])
    dp.add_handler(conv_handler)
    dp.add_handler(CommandHandler("–º–µ–Ω—é", menu))
    dp.add_handler(CommandHandler("–æ–±–Ω–æ–≤–∏—Ç—å", update_data))
    dp.add_handler(CommandHandler("—Ñ–∏–Ω–∞–Ω—Å—ã", get_finance))
    dp.add_handler(CommandHandler("—É—á–µ—Ç_–ø—Ä–æ–¥–∞–∂", get_sales))
    dp.add_handler(CommandHandler("–æ—Ç–≥—Ä—É–∑–∫–∏", get_shipments))
    dp.add_handler(CommandHandler("–∑–∞—Ä–ø–ª–∞—Ç—ã", get_salaries))
    dp.add_handler(CommandHandler("–ø–æ–∏—Å–∫", search_data))
    updater.start_polling()
    updater.idle()

if _name_ == "_main_":
    main()
